SYMBOLS {
    __BLOCKSIZE__: value = 1024, type = export; # 1024 bytes / block
    __BOOTLDR__: type = import;
    __HEADERSIZE__: value = 64, type = export;
    __STARTOFDIRECTORY__: value = $CB, type = export;
    __DIRECTORYSIZE__: value = 5*8, type = export;
    __MEMORY_TOP__: value = $fff8, type = export;
    # Screen is just below the top vectors
    __SCREEN_SIZE__: value = 8160, type = export;
    __MEMORY_SCREEN1__: value = __MEMORY_TOP__ - __SCREEN_SIZE__, type = export;
    __MEMORY_SCREEN0__: value = __MEMORY_SCREEN1__ - __SCREEN_SIZE__, type = export;
    # Under the screen we put the C-stack
    __STACKSIZE__: value = $800, type = export; # 2K stack
    __MEMORY_STACK__: value = __MEMORY_SCREEN0__ - __STACKSIZE__, type = export;
    # Under the stack we must put the resident RAM segment
    __RAM_RESIDENT_SIZE__: value = $3000, type = export;
    __MEMORY_RAM__: value = __MEMORY_STACK__ - __RAM_RESIDENT_SIZE__, type = export;
    # Under the resident code we place the tunes
    __TUNES_SIZE__: value = $11dc, type = export;
    __MEMORY_TUNES__: value = __MEMORY_RAM__ - __TUNES_SIZE__, type = export;
    # Modules start adress
    __MEMORY_MODULES__: value = $0200, type = export;
    __MODULES_SIZE__: value = __MEMORY_TUNES__ - __MEMORY_MODULES__, type = export;
}
MEMORY {
    ZP: start = 0, size = $0100, type = rw, define = yes;
    HEADER: start = $0, size = __HEADERSIZE__, file = %O;
    BOOT: start = $0, size = __STARTOFDIRECTORY__, file = %O;
    DIR: start = $0, size = __DIRECTORYSIZE__, file = %O;
    RAM: start = __MEMORY_RAM__, size = __RAM_RESIDENT_SIZE__, define = yes, file = %O;
    INTRO: start = __MEMORY_MODULES__, size = __MODULES_SIZE__, define = yes, file = %O;
    GAME: start = __MEMORY_MODULES__, size = __MODULES_SIZE__, define = yes, file = %O;
    TUNE: start = __MEMORY_TUNES__, size = __TUNES_SIZE__, define = yes, file = %O;
}
SEGMENTS {
    # The cart.lnx _must_ be built in the order set here!!!

    # lnx header
    EXEHDR: load = HEADER, type = rw, define = yes;
    # encrypted  + secondary bootloader
    BOOTLDR: load = BOOT, type = rw, define = yes;
    # cart directory
    DIRECTORY: load = DIR, type = rw, define = yes;

    # resident code that stays in memory always
    STARTUP: load = RAM, type = ro, define = yes;
    LOWCODE: load = RAM, type = ro, define = yes, optional = yes;
    INIT: load = RAM, type = ro, define = yes, optional = yes;
    CODE: load = RAM, type = ro, define = yes;
    RODATA: load = RAM, type = ro, define = yes;
    DATA: load = RAM, type = rw, define = yes;
    BSS: load = RAM, type = bss, define = yes;
    ZEROPAGE: load = ZP, type = zp;
    EXTZP: load = ZP, type = zp;
    APPZP: load = ZP, type = zp;

    # Intro module
    INTRO_CODE: load = INTRO, type = ro, define = yes;
    INTRO_RODATA: load = INTRO, type = ro, define = yes;
    INTRO_DATA: load = INTRO, type = rw, define = yes;
    INTRO_BSS: load = INTRO, type = bss, optional = yes;

    # The game
    GAME_CODE: load = GAME, type = ro, define = yes;
    GAME_RODATA: load = GAME, type = ro, define = yes;
    GAME_DATA: load = GAME, type = rw, define = yes;
    GAME_BSS: load = GAME, type = bss, optional = yes;
    
     # Tunes
    TUNE0_RODATA: load = TUNE, type = rw, define = yes;
}
FEATURES {
    CONDES: segment = RODATA,
	    type = constructor,
	    label = __CONSTRUCTOR_TABLE__,
	    count = __CONSTRUCTOR_COUNT__;
    CONDES: segment = RODATA,
	    type = destructor,
	    label = __DESTRUCTOR_TABLE__,
	    count = __DESTRUCTOR_COUNT__;
    CONDES: segment = DATA,
	    type = interruptor,
	    label = __INTERRUPTOR_TABLE__,
	    count = __INTERRUPTOR_COUNT__;
}
